# This is the minimum version number required.
fastlane_version "2.93.1"

default_platform :ios

platform :ios do
    # Config variables

    keychain_password = ENV["KEYCHAIN_PASSWORD"]
    crashlytics_api_token = ENV["CRASHLYTICS_API_TOKEN"]
    crashlytics_build_secret = ENV["CRASHLYTICS_BUILD_TOKEN"]
    deliver_username = ENV["DELIVER_USERNAME"]
    match_username = ENV["MATCH_USERNAME"]
    match_git_url = ENV["MATCH_GIT_URL"]

    # Constants

    project_metapath = "./fastlane/metadata"
    project_screenpath = "./fastlane/screenshots"

    app_identifiers = {
        "Stepic" => [
            "com.AlexKarpov.Stepic",
            "com.AlexKarpov.Stepic.watchkitapp", 
            "com.AlexKarpov.Stepic.watchkitapp.watchkitextension", 
            "com.AlexKarpov.Stepic.StickerPackExtension"
        ],
        "Adaptive 1838" => [
            "org.stepik.ios.adaptive.1838"
        ],
        "Adaptive 3150" => [
            "org.stepik.ios.adaptive.3150"
        ],
        "Adaptive 3149" => [
            "org.stepik.ios.adaptive.3149"
        ],
        "Adaptive 3124" => [
            "org.stepik.ios.adaptive.3124"
        ],
        "Adaptive GMAT" => [
            "org.stepik.ios.adaptive.gmat"
        ],
        "Adaptive 8290" => [
            "org.stepik.ios.adaptive.8290"
        ]
    }

    # Helpers

    def version_string(version_number, build_number)
        "v. #{version_number} (#{build_number})"
    end

    # Private lanes

    private_lane :decrypt_keychain do
        unlock_keychain(path: "login.keychain", password: keychain_password)
        sh "security set-keychain-settings -t 3600 -l ~/Library/Keychains/login.keychain"
    end

    # Lanes

    desc "Runs all the tests for scheme."
    desc "Options: scheme"
    lane :test do |options|
        ENV["FASTLANE_EXPLICIT_OPEN_SIMULATOR"] = "0"
        scheme = options[:scheme]

        cocoapods(repo_update: true)

        scan(
            scheme: scheme,
            slack_only_on_failure: true
        )
    end

    desc "Submit a new Beta Build to Crashlytics."
    desc "This will also make sure the profile is up to date."
    desc "Options: scheme"
    lane :beta do |options|
        scheme = options[:scheme]

        clear_derived_data
        cocoapods(repo_update: true)

        decrypt_keychain

        match_adhoc(scheme: scheme)

        # Disable automatic code signing -> build -> enable again
        disable_automatic_code_signing
        begin
            gym(
                scheme: scheme,
                clean: true,
                output_directory: "artefacts",
                output_name: "#{scheme}.ipa",
                include_bitcode: true,
                export_method: "ad-hoc"
            )
        ensure
            enable_automatic_code_signing
            clean_build_artifacts
        end

        crashlytics(
            api_token: crashlytics_api_token,
            build_secret: crashlytics_build_secret,
            notifications: true,
            groups: "all-ios-testers"
        )

        slack(
            message: "Successfully released iOS beta #{scheme} #{version_string(get_version_number, get_build_number)}",
            channel: "#ios-ci"
        )
    end

    desc "Match all certificates for scheme."
    desc "Options: scheme"
    lane :match_all do |options|
        match_dev(scheme: options[:scheme])
        match_adhoc(scheme: options[:scheme])
        match_release(scheme: options[:scheme])
    end

    desc "Match development certificates for scheme."
    desc "Options: scheme"
    lane :match_dev do |options|
        scheme = options[:scheme]
        identifier = app_identifiers[scheme]

        match(
            type: "development",
            force_for_new_devices: true,
            app_identifier: identifier
        )
    end

    desc "Match adhoc certificates for scheme."
    desc "Options: scheme"
    lane :match_adhoc do |options|
        scheme = options[:scheme]
        identifier = app_identifiers[scheme]

        match(
            type: "adhoc",
            force_for_new_devices: true,
            app_identifier: identifier
        )
    end

    desc "Match appstore certificates for scheme."
    desc "Options: scheme"
    lane :match_release do |options|
        scheme = options[:scheme]
        identifier = app_identifiers[scheme]

        match(
            type: "appstore",
            force_for_new_devices: true,
            app_identifier: identifier
        )
    end

    desc "Increment build number in project"
    lane :increment_build do
        increment_build_number
    end

    desc "Set version"

    lane :set_version do |options|
        version = options[:version]
        increment_version_number(version_number: version)
    end

    desc "Increment minor version"
    lane :increment_minor_version do
        increment_version_number(bump_type: "minor")
    end

    desc "Download all dSYM files from App Store and upload to the Crashlytics."
    desc "Options: scheme, version and build"
    lane :refresh_dsyms do |options|
        scheme = options[:scheme]
        app_identifier = app_identifiers[scheme][0]

        params = [
            "app_identifier": app_identifier
        ]

        if options.key?("version")
            version = options[:version]
            params["version"] = options[:version]

            if version != "latest" && options.key?("build")
                params["build"] = options[:build]
            end
        end

        download_dsyms(params)
        upload_symbols_to_crashlytics
        clean_build_artifacts
    end

    desc "Download dDSYMs for latest version."
    desc "Options: scheme"
    lane :refresh_dsyms_for_latest_version do |options|
        refresh_dsyms(
            scheme: options[:scheme],
            version: "latest"
        )
    end

    desc "Deploy a new version to the App Store."
    desc "Options: scheme"
    lane :release do |options|
        scheme = options[:scheme]
        app_identifier = app_identifiers[scheme][0]
        metapath = "#{project_metapath}/#{scheme}"
        screenpath = "#{project_screenpath}/#{scheme}"

        clear_derived_data
        cocoapods(repo_update: true)

        decrypt_keychain

        match_release(scheme: scheme)

        # Disable automatic code signing -> build -> enable again
        disable_automatic_code_signing
        begin
            gym(
                scheme: "#{scheme}",
                clean: true,
                output_directory: "artefacts",
                output_name: "#{scheme}.ipa",
                include_bitcode: true,
                export_method: "app-store"
            )
        ensure
            enable_automatic_code_signing
            clean_build_artifacts
        end

        deliver(
            force: true,
            metadata_path: metapath,
            screenshots_path: screenpath,
            app_identifier: app_identifier,
            username: deliver_username
        )

        slack(
            message: "Successfully released iOS RELEASE #{scheme} #{version_string(get_version_number, get_build_number)}",
            channel: "#ios-ci"
        )
    end

    error do |lane, exception|
        slack(
            message: exception.message,
            success: false
        )
    end
end
